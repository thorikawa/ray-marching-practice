#pragma kernel CalcNextState
#pragma kernel DrawTexture

StructuredBuffer<float> _Colors;
RWStructuredBuffer<uint> _States;
RWStructuredBuffer<uint> _NextStates;
RWTexture2D<float4> _Texture;

uint _Width;
uint _Height;
float _R;
#define MOD 10

[numthreads(8,8,1)]
void CalcNextState (uint3 id : SV_DispatchThreadID)
{
    uint i0 = id.y * _Width + id.x;
    uint i1 = id.y * _Width + ((id.x + _Width - 1) % _Width); // 上のセル
    uint i2 = ((id.y + 1) % _Height) * _Width + ((id.x + _Width - 1) % _Width); // 右上のセル
    uint i3 = ((id.y + 1) % _Height) * _Width + id.x; // 右下のセル
    uint i4 = id.y * _Width + ((id.x + 1) % _Width); // 下のセル
    uint i5 = ((id.y + _Height - 1) % _Height) * _Width + ((id.x + 1) % _Width); // 左下のセル
    uint i6 = ((id.y + _Height - 1) % _Height) * _Width + id.x; // 左上のセル
    uint d = _States[i0] + _States[i1] + _States[i2] + _States[i3] + _States[i4] + _States[i5] + _States[i6];
    d = d % MOD;
    _NextStates[i0] = d;
}

[numthreads(8,8,1)]
void DrawTexture (uint3 id : SV_DispatchThreadID)
{
    float scale = 1.0;
    float unitx = 1.5 * _R;
    float unity = 1.73205080757 * _R;
    float normalLen = 0.86602540378 * _R;
    int cx = floor((float)id.x / unitx);
    int cy = floor(((float)id.y - normalLen * (float)cx) / unity);
    float fx = (float)id.x - unitx * (float)cx;
    float fy = (float)id.y - (unity * (float)cy + normalLen * (float)cx);

    if (fx < 0.5 * _R) {
        if (fy < normalLen) {
            // do nothing
        } else {
            cy = cy + 1;
        }
    } else if (fx < 1.0 * _R) {
        float dx = fx - 0.5 * _R;
        if (fy < normalLen - dx * 1.73205080757) {
            // do nothing
        } else if (fy < normalLen + dx * 1.73205080757) {
            cx = cx + 1;
        } else {
            cy = cy + 1;
        }
    } else {
        cx = cx + 1;
    }
    uint i0 = ((cy + _Height) % _Height) * _Width + (cx % _Width);
    float r = _Colors[3 * _States[i0] + 0];
    float g = _Colors[3 * _States[i0] + 1];
    float b = _Colors[3 * _States[i0] + 2];
    _Texture[id.xy] = float4(r, g, b, 1);
    //_Texture[id.xy] = float4(fx / _R, fy / _R, 0, 1);
}
